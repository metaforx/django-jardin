name: Build, Test and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create env file for build
        run: |
          cat << 'EOF' > .env.prod
          ${{ secrets.ENV_PROD_FILE }}
          EOF

      # Add this step to set up Docker Compose
      - name: Set up Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          version: v2.23.3

      - name: Build containers
        run: docker compose -f docker-compose.prod.yml build

      - name: Run tests
        run: |
          docker compose -f docker-compose.prod.yml run --rm web python manage.py test

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    env:
      DEPLOY_DIR: /opt/django-jardin
    steps:
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DEPLOY_DIR,GITHUB_REPOSITORY
          script: |
            # Ensure deployment directory exists
            mkdir -p $DEPLOY_DIR

            # Install required tools if not available
            if ! command -v unzip &> /dev/null; then
              apt-get update && apt-get install -y unzip
            fi
            
            if ! command -v rsync &> /dev/null; then
              apt-get update && apt-get install -y rsync
            fi

            # Extract repository name for later use
            REPO_NAME=$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2)

            # Download latest code from the current repository
            curl -L https://github.com/$GITHUB_REPOSITORY/archive/refs/heads/main.zip -o /tmp/deployment.zip

            # Extract it (overwriting previous files)
            unzip -o /tmp/deployment.zip -d /tmp/
            
            # Use rsync to copy files, preserving directory structure and overwriting existing files
            rsync -av --delete /tmp/$REPO_NAME-main/ $DEPLOY_DIR/
            
            # Clean up temporary files
            rm -rf /tmp/deployment.zip /tmp/$REPO_NAME-main

            # Set up environment variables from secret
            echo '${{ secrets.ENV_PROD_FILE }}' > $DEPLOY_DIR/.env.prod

            # Build and deploy
            cd $DEPLOY_DIR
            
            # Shut down existing containers and remove volumes and orphaned containers before deployment
            docker compose -f docker-compose.prod.yml down --remove-orphans

            # Remove static volume
            docker volume rm django-jardin_static_volume || true

            # Build and start containers with the updated code
            docker compose -f docker-compose.prod.yml build
            docker compose -f docker-compose.prod.yml up -d

  


