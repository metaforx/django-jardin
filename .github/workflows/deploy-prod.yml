name: Build, Test and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create env file for build
        run: |
          cat << 'EOF' > .env.prod
          ${{ secrets.ENV_PROD_FILE }}
          EOF

      # Add this step to set up Docker Compose
      - name: Set up Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          version: v2.23.3

      - name: Build containers
        run: docker-compose -f docker-compose.prod.yml build

      - name: Run tests
        run: |
          docker-compose -f docker-compose.prod.yml run --rm web python manage.py test

      - name: Save Docker images
        if: success()
        run: |
          mkdir -p images
          docker save $(docker images -q) -o images/docker-images.tar

      - name: Upload Docker images as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: images/docker-images.tar
          retention-days: 1

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: images

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host key to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Copy and deploy
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Increase SSH timeout settings
          mkdir -p ~/.ssh
          echo "ServerAliveInterval 60" >> ~/.ssh/config
          echo "ServerAliveCountMax 10" >> ~/.ssh/config
          
          # Split the large file transfer
          echo "Copying Docker images to server..."
          scp -o ConnectTimeout=60 -o ConnectionAttempts=5 images/docker-images.tar $SERVER_USER@$SERVER_IP:/tmp/
          echo "Image transfer complete"
          
          # Copy Docker Compose file
          echo "Copying Docker Compose files..."
          scp -o ConnectTimeout=60 -o ConnectionAttempts=5 docker-compose.prod.yml $SERVER_USER@$SERVER_IP:/tmp/
          echo "Compose file transfer complete"
          
          # Run deployment in smaller steps
          echo "Stopping existing containers..."
          ssh -o ConnectTimeout=60 $SERVER_USER@$SERVER_IP "docker-compose -f /opt/django-jardin/docker-compose.prod.yml down --remove-orphans || true"
          
          echo "Loading Docker images..."
          ssh -o ConnectTimeout=60 $SERVER_USER@$SERVER_IP "docker load -i /tmp/docker-images.tar"
          
          echo "Setting up deployment directory..."
          ssh -o ConnectTimeout=60 $SERVER_USER@$SERVER_IP "mkdir -p /opt/django-jardin && cp /tmp/docker-compose.prod.yml /opt/django-jardin/"
          
          echo "Creating environment file..."
          ssh -o ConnectTimeout=60 $SERVER_USER@$SERVER_IP "cat > /opt/django-jardin/.env.prod" << 'ENDSSH'
          ${{ secrets.ENV_PROD_FILE }}
          ENDSSH
          
          echo "Starting containers..."
          ssh -o ConnectTimeout=60 $SERVER_USER@$SERVER_IP "cd /opt/django-jardin && docker-compose -f docker-compose.prod.yml up -d"
          
          echo "Cleaning up..."
          ssh -o ConnectTimeout=60 $SERVER_USER@$SERVER_IP "rm /tmp/docker-images.tar"
          
          echo "Deployment completed successfully"

          "